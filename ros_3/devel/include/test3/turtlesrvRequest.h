// Generated by gencpp from file test3/turtlesrvRequest.msg
// DO NOT EDIT!


#ifndef TEST3_MESSAGE_TURTLESRVREQUEST_H
#define TEST3_MESSAGE_TURTLESRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test3
{
template <class ContainerAllocator>
struct turtlesrvRequest_
{
  typedef turtlesrvRequest_<ContainerAllocator> Type;

  turtlesrvRequest_()
    : data(false)
    , turtlename()
    , x(0.0)
    , z(0.0)  {
    }
  turtlesrvRequest_(const ContainerAllocator& _alloc)
    : data(false)
    , turtlename(_alloc)
    , x(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _data_type;
  _data_type data;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turtlename_type;
  _turtlename_type turtlename;

   typedef double _x_type;
  _x_type x;

   typedef double _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::test3::turtlesrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test3::turtlesrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct turtlesrvRequest_

typedef ::test3::turtlesrvRequest_<std::allocator<void> > turtlesrvRequest;

typedef boost::shared_ptr< ::test3::turtlesrvRequest > turtlesrvRequestPtr;
typedef boost::shared_ptr< ::test3::turtlesrvRequest const> turtlesrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test3::turtlesrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test3::turtlesrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::test3::turtlesrvRequest_<ContainerAllocator1> & lhs, const ::test3::turtlesrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.turtlename == rhs.turtlename &&
    lhs.x == rhs.x &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::test3::turtlesrvRequest_<ContainerAllocator1> & lhs, const ::test3::turtlesrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace test3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::test3::turtlesrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test3::turtlesrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test3::turtlesrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test3::turtlesrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test3::turtlesrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test3::turtlesrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test3::turtlesrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31ceb1ca4fcd0b5c3ccae94b453e5b8";
  }

  static const char* value(const ::test3::turtlesrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31ceb1ca4fcd0b5ULL;
  static const uint64_t static_value2 = 0xc3ccae94b453e5b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::test3::turtlesrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test3/turtlesrvRequest";
  }

  static const char* value(const ::test3::turtlesrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test3::turtlesrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool data\n"
"string turtlename\n"
"float64 x\n"
"float64 z\n"
;
  }

  static const char* value(const ::test3::turtlesrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test3::turtlesrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.turtlename);
      stream.next(m.x);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtlesrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test3::turtlesrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test3::turtlesrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
    s << indent << "turtlename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turtlename);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST3_MESSAGE_TURTLESRVREQUEST_H
